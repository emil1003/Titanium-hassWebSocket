--- Manages a WebSocket event subscription, for listening to events on the Home Assistant instance
--- @class WebSocketSubscription : WebSocketRequest
--- @field EVENT_STATE_CHANGED string
--- @field CALLBACK_SUBSCRIBED string
--- @field CALLBACK_UNSUBSCRIBED string
--- @field CALLBACK_EVENT string
--- @field eventType string Event type being subscribed to (see WebSocketSubscription.static for available types)
--- @field subscribed boolean Whether WebSocket instance has confirmed that this subscription is active
--- @field filters table<string, boolean> If not empty, only allow events from entity_ids in this table
WebSocketSubscription = {}
class "WebSocketSubscription" extends "WebSocketRequest" {
	static = {
		EVENT_STATE_CHANGED = "state_changed",
		-- TODO: Add event types

		CALLBACK_SUBSCRIBED = "subscribed",
		CALLBACK_UNSUBSCRIBED = "unsubscribed",
		CALLBACK_EVENT = "event"
	},

	filters = {}
}

--- Resolve constructor arguments
--- @vararg any
function WebSocketSubscription:__init__(...)
	self:resolve(...)
	self.type = WebSocketRequest.SUBSCRIBE_EVENTS

	-- Compile request table
	self.message = {
		type = self.type,
		event_type = self.eventType
	}
end

--- Add entity_ids to filter
--- @param ids string|table ids to add to filter
function WebSocketSubscription:filter(ids)
	if type(ids) == "string" then
		-- Single filter entry
		self.filters[ids] = true
	elseif type(ids) == "table" then
		-- Multiple entries in non-indexed table
		for _, id in ipairs(ids) do
			self.filters[id] = true
		end
	else
		error("Bad argument #1 to 'filter' (expected string or table, got "..type(ids)..")")
	end
end

configureConstructor({
	orderedArguments = {"eventType"}
})
