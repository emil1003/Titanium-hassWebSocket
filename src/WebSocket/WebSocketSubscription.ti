--- Manages a WebSocket event subscription, for listening to events on the Home Assistant instance
--- @class WebSocketSubscription : WebSocketRequest
--- @field super WebSocketRequest
--- @field EVENT_STATE_CHANGED string
--- @field CALLBACK_SUBSCRIBED string
--- @field CALLBACK_UNSUBSCRIBED string
--- @field CALLBACK_EVENT string
--- @field eventType string Event type being subscribed to (see WebSocketSubscription.static for available types)
--- @field subscribed boolean Whether WebSocket instance has confirmed that this subscription is active
--- @field filters string[] If not empty, only allow events where entity_id matches any entry (with string.find)
WebSocketSubscription = {}
class "WebSocketSubscription" extends "WebSocketRequest" {
	static = {
		EVENT_STATE_CHANGED = "state_changed",
		-- TODO: Add event types

		CALLBACK_SUBSCRIBED = "subscribed",
		CALLBACK_UNSUBSCRIBED = "unsubscribed",
		CALLBACK_EVENT = "event"
	},

	filters = {}
}

--- Resolve constructor arguments
--- @vararg any
function WebSocketSubscription:__init__(...)
	self:resolve(...)
	self.type = WebSocketRequest.SUBSCRIBE_EVENTS

	-- Compile request table
	self.message = {
		type = self.type,
		event_type = self.eventType
	}
end

--- Attach a callback function to be run when an event of the subscribed type occurs
--- @param fn fun(self: WebSocketSubscription, event: WebSocketMessage): void
--- @param id string
--- @return WebSocketRequest
function WebSocketSubscription:doOnEvent(fn, id)
	return self:on(WebSocketSubscription.CALLBACK_EVENT, fn, id)
end

--- Add expression(s) to filter list
--- @vararg string
function WebSocketSubscription:filter(...)
	local expressions = {...}
	for i, expr in ipairs(expressions) do
		if type(expr) ~= "string" then
			error("Bad argument #"..i.." to 'filter' (expected string, got "..type(expr)..")")
		end

		table.insert(self.filters, expr)
	end
end

configureConstructor({
	orderedArguments = {"eventType"}
})
