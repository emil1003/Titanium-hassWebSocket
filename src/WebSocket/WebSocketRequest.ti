--- Creates a request with data for sending to Home Assistant instance
--- @class WebSocketRequest : MCallbackManager
--- @field super MCallbackManager
--- @field AUTH string
--- @field SUBSCRIBE_EVENTS string
--- @field SUBSCRIBE_TRIGGER string
--- @field UNSUBSCRIBE_EVENTS string
--- @field FIRE_EVENT string
--- @field CALL_SERVICE string
--- @field GET_STATES string
--- @field GET_CONFIG string
--- @field GET_PANELS string
--- @field PING string
--- @field CALLBACK_RESULT string
--- @field VALIDATE_CONFIG string
--- @field type string @Request type (see [WebSocketRequest].static for available types)
--- @field message table @Message (as JSON-able table) to send
--- @field id number @Automatically assigned command ID (given at send-time)
WebSocketRequest = {}
class "WebSocketRequest" mixin "MCallbackManager" {
	static = {
		AUTH = "auth",
		SUBSCRIBE_EVENTS = "subscribe_events",
		SUBSCRIBE_TRIGGER = "subscribe_trigger",
		UNSUBSCRIBE_EVENTS = "unsubscribe_events",
		FIRE_EVENT = "fire_event",
		CALL_SERVICE = "call_service",
		GET_STATES = "get_states",
		GET_CONFIG = "get_config",
		GET_PANELS = "get_panels",
		PING = "ping",
		VALIDATE_CONFIG = "validate_config",

		CALLBACK_RESULT = "result"
	},

	message = {}
}

--- Resolve constructor arguments
--- @vararg any
function WebSocketRequest:__init__(...)
	self:resolve(...)
	self.message.type = self.type
end

--- Attach a callback function to be run when result event occurs
--- @param fn fun(self: WebSocketRequest, result: WebSocketMessage): void @Callback function
--- @param id string @Callback ID
--- @return WebSocketRequest @Self
function WebSocketRequest:doOnResult(fn, id)
	return self:on(WebSocketRequest.CALLBACK_RESULT, fn, id)
end

configureConstructor({
	orderedArguments = {"type", "message"}
})
