--- Creates and manages a WebSocket connection
--- (using http.websocket from [CC:Tweaked](https://tweaked.cc)) to Home Assistant instance.
--- See [Home Assistant WebSocket API Documentation](https://developers.home-assistant.io/docs/api/websocket/)
--- for more.
--- @class WebSocket : MCallbackManager
--- @field CALLBACK_CONNECTION_CHANGED string
--- @field CALLBACK_CONNECTION_FAILURE string
--- @field CALLBACK_AUTH_REQUESTED string
--- @field CALLBACK_AUTHENTICATED string
--- @field HEARTBEAT_SCHEDULE_NAME string
--- @field HEARTBEAT_INTERVAL number
--- @field url string @WebSocket endpoint URL (constructor arg 1)
--- @field apiToken string @Home Assistant API Token (constructor arg 2)
--- @field application Application @Application instance (constructor arg 3)
--- @field awaitingResult table<number, MRequestable> @Table of requests awaiting a result
--- @field subscriptions table<number, MSubscribable> @Table of currently kept subscriptions
--- @field ws http.Websocket @WebSocket handle
--- @field isOpen boolean @Whether the WebSocket connection is open
--- @field isAuthenticated boolean @Whether server has authenticated our API Token
--- @field id number @Internal command ID tracker
--- @field hooked boolean @Whether WebSocket is hooked to an application instance
--- @field identifier string @Instance identifier ("websocket_<ID>")
WebSocket = {}
class "WebSocket" mixin "MCallbackManager" {
	static = {
		CALLBACK_CONNECTION_CHANGED = "connection_changed",
		CALLBACK_CONNECTION_FAILURE = "connection_failure",
		CALLBACK_AUTH_REQUESTED = "auth_requested",
		CALLBACK_AUTHENTICATED = "authenticated",

		HEARTBEAT_INTERVAL = 20
	},

	awaitingResult = {},
	subscriptions = {},

	isOpen = false,
	isAuthenticated = false,
	id = 0,
	hooked = false
}

--- Resolve constructor arguments
--- @vararg any
function WebSocket:__init__(...)
	self:resolve(...)

	-- Set instance identifier
	self.identifier = "websocket_"..self.__ID

	-- If application passed in constructor, hook immediately
	if self.application then
		self:hook(self.application)
	end
end

--- Hook into Application instance
--- @param app Application @Application to hook
function WebSocket:hook(app)
	if not Titanium.typeOf(app, "Application", true) then
		error("Bad argument #1 to 'hook' (expected Application, got "..type(request)..")", 3)
	end

	-- If already hooked, bail
	if self.hooked then return end

	--- @type WebSocketEvent[]
	local eventTypes = {WebSocketSuccessEvent, WebSocketFailureEvent, WebSocketClosedEvent, WebSocketMessageEvent}

	-- Handle event hooking
	for _, type in ipairs(eventTypes) do
		-- Bind event names to classes
		Event.bindEvent(type.EVENT_NAME, type.__type)

		-- Hook event callbacks to handler
		app:on(type.EVENT_NAME, function(_, e)
			self:handle(e)
		end, self.identifier)
	end

	-- Setup heartbeat loop
	app:schedule(function()
		if self.isOpen and self.isAuthenticated then
			local r = WebSocketRequest(WebSocketRequest.PING)
			self:send(r)
		end
	end, WebSocket.HEARTBEAT_INTERVAL, true, self.identifier)

	-- Keep application reference
	self.application = app
	self.hooked = true
end

--- Initialize server connection
function WebSocket:connect()
	-- Check that we're not already open
	if self.isOpen then
		error("Attempt to call :connect on already open WebSocket", 3)
	end

	-- Ensure we have an URL
	if not self.url then
		error("Attempt to call :connect on WebSocket with no URL set", 3)
	end

	-- http.websocketAsync returns connection instance in event queue
	http.websocketAsync(self.url)
end

--- Close WebSocket connection, queue close event and kill heartbeat
function WebSocket:close()
	-- Check that we're not already closed
	if not self.isOpen then
		error("Attempt to call :close on already closed WebSocket", 3)
	end

	self.ws.close()

	-- Notify listeners
	-- SUGGEST: Application:handle? Potentially synchronous/blocking
	os.queueEvent(WebSocketEvent.CLOSED)

	if self.application then
		self.application:unschedule(self.identifier)
	end
end

--- Send a message on the WebSocket connection. **Note**: Calling this function manually
--- does not provide callbacks for requests and subscriptions, use :request and :subscribe instead
--- @param message MRequestable|table @Message/request to be sent
--- @param noIncrement boolean @If true, don't increment and append command ID
--- @return number @Assigned command ID (or nil if noIncrement)
function WebSocket:send(message, noIncrement)
	-- If message is not a table, error
	if type(message) ~= "table" then
		error("Bad argument #1 to 'send' (expected table, got "..type(message)..")", 3)
	end

	-- Lift message out of requestable
	if Titanium.mixesIn(message, MRequestable.__type) then
		message = message.message
	end

	-- Ensure WebSocket is even open
	if not self.isOpen then
		error("Attempt to call :send on closed WebSocket", 3)
	end

	if not noIncrement then
		-- Home Assistant expects a command ID that increments every time
		-- We handle it here
		self.id = self.id + 1

		-- Modify message to contain command ID
		message["id"] = self.id
	end

	-- Encode message to JSON string
	local o = textutils.serializeJSON(message)

	-- If serializeJSON failed, bail
	if not o then
		error("textutils.serializeJSON produced nil value")
	end

	self.ws.send(o)

	return noIncrement and nil or self.id
end

--- Send Home Assistant authentication message
--- @param authToken string @Home Assistant API Token
function WebSocket:authenticate(authToken)
	if not authToken then
		error("Bad argument #1 to 'authenticate' (expected string, got "..type(authToken)..")")
	end

	-- Avoid sending authentication when authenticated
	if self.isAuthenticated then
		error("Attempt to call :authenticate on already authenticated WebSocket", 3)
	end

	-- Setup WebSocket message
	local r = WebSocketRequest(WebSocketRequest.AUTH, {
		access_token = authToken
	})

	-- Authentication does not expect command ID
	self:send(r, true)
end

--- Send a WebSocket request, and listen for responses to it
--- @param request MRequestable @Request to send
--- @return boolean @Request sent
function WebSocket:request(request)
	if not Titanium.mixesIn(request, MRequestable.__type) then
		error("Bad argument #1 to 'request' (expected MRequestable)")
	end

	-- An active subscription cannot be requested
	if Titanium.mixesIn(request, MSubscribable.__type) then
		if request.subscribed then
			error("Attempt to request a subscription that is active", 3)
		end
	end

	local id = self:send(request)
	if not id then return false end

	request.id = id
	self.awaitingResult[id] = request

	return true
end

--- Subscribe to and keep track of a subscription
--- @param subscription MSubscribable @Subscription to subscribe to
--- @return boolean @Subscription was requested
function WebSocket:subscribe(subscription)
	if not Titanium.mixesIn(subscription, MSubscribable.__type) then
		error("Bad argument #1 to 'subscribe' (expected MSubscribable)")
	end

	if subscription.subscribed then
		error("Attempt to subscribe an active subscription", 3)
	end

	-- Send to get next command ID
	local id = self:send(subscription)
	if not id then return false end

	-- Add ID to subscription and insert at ID pos in subscriptions
	subscription.id = id

	-- A subscribable is inserted into awaitingResult initially
	-- When a result returns, it gets moved into subscriptions
	self.awaitingResult[id] = subscription

	return true
end

--- Unsubscribe from an active subscription
--- @param subscription MSubscribable @Subscription to unsubscribe from
--- @return boolean @Unsubscribe requested
function WebSocket:unsubscribe(subscription)
	if not Titanium.mixesIn(subscription, MSubscribable.__type) then
		error("Bad argument #1 to 'unsubscribe' (expected MSubscribable)")
	end

	if not subscription.subscribed then
		error("Attempt to unsubscribe an inactive subscription", 3)
	end

	-- We make our own WebSocketRequest for unsubscribing
	local unsubReq = WebSocketRequest(WebSocketRequest.UNSUBSCRIBE_EVENTS, {
		subscription = subscription.id -- ID of the subscription to cancel
	})

	-- We need to know if unsubscribing was successful
	unsubReq:doOnResult(function(s, event)
		local sub = self.subscriptions[s.message.subscription]
		if event.success then
			-- HACK: Subscribable may think subscribing failed
			event.success = false
			sub:handleResult(event)

			-- Sub inactive, remove
			self.subscriptions[s.message.subscription] = nil
		end
	end)

	local id = self:request(unsubReq)
	if not id then return false end

	return true
end

--- Handle a WebSocket event
--- @param event WebSocketEvent @Event to handle
function WebSocket:handle(event)
	-- Ensure param is an event
	if not Titanium.typeOf(event, WebSocketEvent.__type, true) then
		error("Bad argument #1 to 'handle' (expected typeof WebSocketEvent)", 3)
	end

	-- Drop event if url doesn't match ours
	if event.url ~= self.url then return end

	-- Handle event
	if event:is(WebSocketMessageEvent.EVENT_NAME) then
		--- @type WebSocketMessageEvent
		local message = event

		-- If parsing failed, this message is unusable
		if not message.type then return end

		if message.type == WebSocketMessageEvent.TYPE_AUTH_REQUIRED then
			-- Server requests authentication
			-- If we have the API token, send it
			if self.apiToken then
				self:authenticate(self.apiToken)
			else
				-- Let implementor handle auth
				self:executeCallbacks(WebSocket.CALLBACK_AUTH_REQUESTED)
			end
		elseif message.type == WebSocketMessageEvent.TYPE_AUTH_OK then
			-- Only when authenticated can commands be sent
			self.isAuthenticated = true
			self:executeCallbacks(WebSocket.CALLBACK_AUTHENTICATED)
		elseif message.type == WebSocketMessageEvent.TYPE_RESULT then
			local req = self.awaitingResult[message.id]
			if req then
				-- If request is a subscription, move it to subscriptions
				if Titanium.mixesIn(req, MSubscribable.__type) then
					-- Only move if subscribing was successful
					if message.success then
						self.subscriptions[req.id] = req
					end
				end

				req:handleResult(message)

				-- Requests are one-shot, remove from queue
				self.awaitingResult[req.id] = nil
			end
		elseif message.type == WebSocketMessageEvent.TYPE_EVENT then
			-- Find target subscription and execute callbacks
			local sub = self.subscriptions[message.id]
			if sub then
				sub:handleEvent(message)
			end
		end
	elseif event:is(WebSocketSuccessEvent.EVENT_NAME) then
		--- @type WebSocketSuccessEvent
		local successEvent = event
		-- Avoid phantom events
		if self.isOpen then return end
		self.isOpen = true

		-- WebSocketSuccessEvent contains a ready WebSocket handle
		self.ws = successEvent.websocket

		self:executeCallbacks(WebSocket.CALLBACK_CONNECTION_CHANGED, self.isOpen)
	elseif event:is(WebSocketFailureEvent.EVENT_NAME) then
		--- @type WebSocketFailureEvent
		local failureEvent = event

		-- Opening WebSocket connection failed
		self.isOpen = false
		self:executeCallbacks(WebSocket.CALLBACK_CONNECTION_FAILURE, failureEvent.error)
	elseif event:is(WebSocketClosedEvent.EVENT_NAME) then
		-- Avoid phantom events
		if not self.isOpen then return end
		self.isOpen = false
		self.isAuthenticated = false

		self:executeCallbacks(WebSocket.CALLBACK_CONNECTION_CHANGED, self.isOpen)
	end
end

configureConstructor({
	orderedArguments = {"url", "apiToken", "application"}
})
