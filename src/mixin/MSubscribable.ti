--- Mixin to make an object subscribable
--- @class MSubscribable : MRequestable
--- @field CALLBACK_SUBSCRIPTION_CHANGED string
--- @field CALLBACK_EVENT string
--- @field public subscribed boolean @Whether WebSocket instance has confirmed that this subscription is active
MSubscribable = {}
class "MSubscribable" mixin "MRequestable" {
	static = {
		CALLBACK_SUBSCRIPTION_CHANGED = "subscription_changed",
		CALLBACK_EVENT = "event",
	},

	subscribed = false
} abstract()

--- Attach a callback function to be run when an event of the subscribed type occurs
--- @param fn fun(self: self, event: WebSocketMessageEvent) @Callback function
--- @param id? string @Callback ID
--- @return self @Self
function MSubscribable:doOnEvent(fn, id)
	return self:on(MSubscribable.CALLBACK_EVENT, --[[---@type]] fn, id)
end

--- Attach a callback function to be run when subscription status changes
--- @param fn fun(self: self, status: boolean) @Callback function
--- @param id? string @Callback ID
--- @return self @Self
function MSubscribable:doOnSubscriptionChanged(fn, id)
	return self:on(MSubscribable.CALLBACK_SUBSCRIPTION_CHANGED, --[[---@type]] fn, id)
end

--- Handle result message
--- @param message WebSocketMessageEvent @Message to handle
function MSubscribable:handleResult(message)
	-- Overrides function in MRequestable
	self:executeCallbacks(MRequestable.CALLBACK_RESULT, message)

	-- A result for a subscribable can only indicate that subscription status changed
	if message.success ~= self.subscribed then
		self.subscribed = message.success
		self:executeCallbacks(MSubscribable.CALLBACK_SUBSCRIPTION_CHANGED, message.success)
	end
end

--- Handle an event message
--- @param message WebSocketMessageEvent @Event message to handle
function MSubscribable:handleEvent(message)
	self:executeCallbacks(MSubscribable.CALLBACK_EVENT, message)
end
