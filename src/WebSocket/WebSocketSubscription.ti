--- Manages a WebSocket event subscription, for listening to events on the Home Assistant instance
--- @class WebSocketSubscription : MSubscribable
--- @field super WebSocketRequest
--- @field EVENT_STATE_CHANGED string
--- @field CALLBACK_SUBSCRIBED string
--- @field CALLBACK_UNSUBSCRIBED string
--- @field CALLBACK_EVENT string
--- @field eventType string @Event type being subscribed to (see WebSocketSubscription.static for available types)
--- @field filters string[] @If not empty, only allow events where entity_id matches any entry (with string.find)
--- @overload fun(eventType?: string): WebSocketSubscription
WebSocketSubscription = {}
class "WebSocketSubscription" mixin "MSubscribable" mixin "MRequestable" {
	static = {
		EVENT_STATE_CHANGED = "state_changed",
		-- TODO: Add event types

		--- @deprecated Use callbacks from MSubscribable instead
		CALLBACK_SUBSCRIBED = "subscribed",
		CALLBACK_UNSUBSCRIBED = "unsubscribed",
		CALLBACK_EVENT = "event"
	},

	filters = {}
}

--- Resolve constructor arguments
--- @vararg any
function WebSocketSubscription:__init__(...)
	self:resolve(...)
	self.type = WebSocketRequest.SUBSCRIBE_EVENTS
end

function WebSocketSubscription:getMessage()
	self.message = {
		type = self.type,
		event_type = self.eventType
	}
	return self.message
end

--- Add expression(s) to filter list
--- @vararg string @Expressions to add
function WebSocketSubscription:filter(...)
	local expressions = {...}
	for i, expr in ipairs(expressions) do
		if type(expr) ~= "string" then
			error("Bad argument #"..i.." to 'filter' (expected string, got "..type(expr)..")")
		end

		table.insert(self.filters, expr)
	end
end

--- Handle a WebSocket message
--- @param message WebSocketMessageEvent @Message to handle
function WebSocketSubscription:handleEvent(message)
	-- If we have filters, handle them
	if next(self.filters) then
		local data = message:getEventData()

		-- If event data not decoded, bail
		if not data then return end

		-- Search filters for match
		local match = false
		for _, key in ipairs(self.filters) do
			if string.find(data["entity_id"], key) then
				match = true
				break
			end
		end

		-- If no match, drop event
		if not match then return end
	end

	self:executeCallbacks(MSubscribable.CALLBACK_EVENT, message)
end

configureConstructor({
	orderedArguments = {"eventType"},
	argumentTypes = {
		eventType = "string"
	}
})
