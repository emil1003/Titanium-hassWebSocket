--- Data model for a WebSocket service call
--- @class WebSocketServiceCall : WebSocketRequest
--- @field domain string @Target domain (see [Domains].static for available domains)
--- @field service string @Target service (see *Services.static for available services)
--- @field entity_id string @Target entity ID
--- @field serviceData table<string, any> @Extra data for call
WebSocketServiceCall = {}
class "WebSocketServiceCall" extends "WebSocketRequest" {}

--- Resolve constructor arguments
--- @vararg any
function WebSocketServiceCall:__init__(...)
	self:resolve(...)

	-- This class uses a static type
	self.type = WebSocketRequest.CALL_SERVICE

	-- If properties passed in constructor, construct message immediately
	if self.domain and self.service then
		self:constructMessage()
	end
end

--- Construct message from properties
--- @return table @Constructed message
function WebSocketServiceCall:constructMessage()
	if not self.domain or not self.service then
		error("Attempt to construct message without domain and service", 3)
	end

	-- Construct message
	self.message = {
		type = self.type,
		domain = self.domain,
		service = self.service,
		service_data = {
			entity_id = self.entity_id
		}
	}

	-- Populate optional service data
	if self.serviceData then
		for k, v in pairs(self.serviceData) do
			self.message.service_data[k] = v
		end
	end

	return self.message
end

configureConstructor({
	orderedArguments = {"domain", "service", "entity_id", "serviceData"},
	argumentTypes = {domain = "string", service = "string", entity_id = "string", service_data = "table"}
})
